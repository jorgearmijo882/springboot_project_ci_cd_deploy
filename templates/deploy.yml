# templates/deploy.yml

parameters:
- name: artifactName
  type: string
- name: version
  type: string
- name: remoteHost
  type: string
- name: remoteUser
  type: string
- name: remotePath
  type: string
- name: backupPath
  type: string
- name: healthCheckUrl
  type: string

jobs:
- job: Deploy
  displayName: Deploy to Remote
  pool:
    name: Default

  steps:
    # 1) Descargar el JAR publicado en Release
    - task: DownloadPipelineArtifact@2
      displayName: 'Download JAR from Build'
      inputs:
        buildType: 'current'
        artifactName: ${{ parameters.artifactName }}
        targetPath: '$(Pipeline.Workspace)'

    # 2) Transferir al servidor remoto
    - task: PowerShell@2
      displayName: 'Transfer Artifact'
      inputs:
        targetType: 'inline'
        script: |
          # Ubicación donde DownloadPipelineArtifact colocó el artifact:
          $artifactDir = Join-Path $env:Pipeline_Workspace '${{ parameters.artifactName }}'
          
          # Busca el primer .jar en esa carpeta
          $jarFile = Get-ChildItem -Path $artifactDir -Filter '*.jar' | Select-Object -First 1
          if (-not $jarFile) {
            throw "No se encontró ningún .jar en $artifactDir"
          }

          # Define origen y destino
          $source = $jarFile.FullName
          $destination = "${{ parameters.remoteUser }}@${{ parameters.remoteHost }}:${{ parameters.remotePath }}/app.jar"
          
          Write-Host "Transfiriendo '$($jarFile.Name)' desde '$source' a '$destination'"
          scp.exe -o StrictHostKeyChecking=no $source $destination

    # 3) Respaldar el artefacto anterior
    - task: PowerShell@2
      displayName: 'Backup Previous Artifact'
      inputs:
        targetType: 'inline'
        script: |
          $remote = "${{ parameters.remoteUser }}@${{ parameters.remoteHost }}"
          $cmd = "mkdir -p ${{ parameters.backupPath }} && cp ${{ parameters.remotePath }}/app.jar ${{ parameters.backupPath }}/app-$(date +'%Y%m%d%H%M%S').jar"
          Write-Host "Ejecutando backup en $remote: $cmd"
          ssh.exe -o StrictHostKeyChecking=no $remote $cmd

    # 4) Reemplazar y reiniciar la aplicación
    - task: PowerShell@2
      displayName: 'Replace and Restart Application'
      inputs:
        targetType: 'inline'
        script: |
          $remote = "${{ parameters.remoteUser }}@${{ parameters.remoteHost }}"
          $block = @'
          pkill -f "java -jar"
          nohup java -jar ${{ parameters.remotePath }}/app.jar > /dev/null 2>&1 &
          '@
          Write-Host "Reiniciando aplicación en $remote"
          ssh.exe -o StrictHostKeyChecking=no $remote $block

    # 5) Health check HTTP
    - task: PowerShell@2
      displayName: 'Health Check'
      inputs:
        targetType: 'inline'
        script: |
          $url = "${{ parameters.healthCheckUrl }}"
          for ($i=1; $i -le 5; $i++) {
            $status = (& curl.exe -s -o $null -w "%{http_code}" $url)
            if ($status -eq "200") {
              Write-Host "Health check OK"
              exit 0
            }
            Write-Host "Intento $i: estado $status"
            Start-Sleep -Seconds 5
          }
          throw "Health check falló después de reintentos"
