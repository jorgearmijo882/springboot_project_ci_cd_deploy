parameters:
  - name: artifactName
    type: string
    default: ''
  - name: version
    type: string
    default: ''
  - name: remoteHost
    type: string
    default: ''
  - name: remoteUser
    type: string
    default: ''
  - name: remotePath
    type: string
    default: ''
  - name: backupPath
    type: string
    default: ''
  - name: healthCheckUrl
    type: string
    default: ''

jobs:
- job: Deploy
  displayName: Deploy to Remote
  pool:
    name: Default

  steps:
    # 1) Descargar el JAR publicado en Release
    - task: DownloadPipelineArtifact@2
      displayName: 'Download JAR from Build'
      inputs:
        buildType: 'current'
        artifactName: ${{ parameters.artifactName }}
        targetPath: '$(System.DefaultWorkingDirectory)'

    # 2) Transferir al servidor remoto
    - task: PowerShell@2
      displayName: 'Transfer Artifact'
      inputs:
        targetType: 'inline'
        script: |
          # Aquí usamos literales ya expandidos: ej. "demo-51.jar"
          $source = Join-Path "$(System.DefaultWorkingDirectory)" "${{ parameters.artifactName }}-${{ parameters.version }}.jar"
          $destination = "${{ parameters.remoteUser }}@${{ parameters.remoteHost }}:${{ parameters.remotePath }}/app.jar"
          Write-Host "Transferring artifact from $source to $destination"
          scp.exe -o StrictHostKeyChecking=no $source $destination

    # 3) Respaldar el artefacto anterior
    - task: PowerShell@2
      displayName: 'Backup Previous Artifact'
      inputs:
        targetType: 'inline'
        script: |
          $remote = "${{ parameters.remoteUser }}@${{ parameters.remoteHost }}"
          $cmd = "mkdir -p ${{ parameters.backupPath }} && cp ${{ parameters.remotePath }}/app.jar ${{ parameters.backupPath }}/app-$(date +'%Y%m%d%H%M%S').jar"
          Write-Host "Running backup on $remote: $cmd"
          ssh.exe -o StrictHostKeyChecking=no $remote $cmd

    # 4) Reemplazar y reiniciar la aplicación
    - task: PowerShell@2
      displayName: 'Replace and Restart Application'
      inputs:
        targetType: 'inline'
        script: |
          $remote = "${{ parameters.remoteUser }}@${{ parameters.remoteHost }}"
          $block = @'
          pkill -f "java -jar"
          nohup java -jar ${{ parameters.remotePath }}/app.jar > /dev/null 2>&1 &
          '@
          Write-Host "Executing restart block on $remote"
          ssh.exe -o StrictHostKeyChecking=no $remote $block

    # 5) Health check HTTP
    - task: PowerShell@2
      displayName: 'Health Check'
      inputs:
        targetType: 'inline'
        script: |
          $url = "${{ parameters.healthCheckUrl }}"
          for ($i=1; $i -le 5; $i++) {
            $status = (curl.exe -s -o $null -w "%{http_code}" $url)
            if ($status -eq "200") {
              Write-Host "Health check passed"
              exit 0
            }
            Write-Host "Attempt $i: Health check failed with status $status"
            Start-Sleep -Seconds 5
          }
          Write-Error "Health check failed after retries"
          exit 1
